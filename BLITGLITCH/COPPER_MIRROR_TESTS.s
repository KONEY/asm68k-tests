;*** MiniStartup by Photon ***
	INCDIR	"NAS:AMIGA/CODE/crippled_cyborg_amiga/"
	SECTION	"Code",CODE
	INCLUDE	"PhotonsMiniWrapper1.04!.S"
	INCLUDE	"Blitter-Register-List.S"	;use if you like ;)
	;INCLUDE	"PT12_OPTIONS.i"
	;INCLUDE	"P6112-Play-stripped.i"
;********** Constants **********
wi		EQU 320
he		EQU 256		; screen height
bpls		EQU 1		; depth
bypl		EQU wi/16*2	; byte-width of 1 bitplane line (40bytes)
bwid		EQU bpls*bypl	; byte-width of 1 pixel line (all bpls)
blitsize		EQU he*64+wi/16	; size of blitter operation
blitsizeF		EQU %000000000000010101	; size of FULL blitter operation
bplsize		EQU bypl*he		; size of 1 bitplane screen
hband		EQU 10		; lines reserved for textscroller
hblit		EQU he/2		;-hband	; size of blitter op without textscroller
wblit		EQU wi/2/16*2
bypl_real		EQU wi/16*2
COP_Y_MIRROR	EQU 1
;*************
MODSTART_POS	EQU 0		; start music at position # !! MUST BE EVEN FOR 16BIT
;*************

;********** Demo **********	;Demo-specific non-startup code below.
Demo:			;a4=VBR, a6=Custom Registers Base addr
	;*--- init ---*
	MOVE.L	#VBint,$6C(A4)
	MOVE.W	#%1110000000100000,INTENA
	;** SOMETHING INSIDE HERE IS NEEDED TO MAKE MOD PLAY! **
	MOVE.W	#%1000011111100000,DMACON	; BIT10=BLIT NASTY
	MOVE.W	#%0000010000000000,DMACON	; BIT10=BLIT NASTY DISABLED
	;*--- clear screens ---*
	;LEA	SCREEN1,A1
	;BSR.W	ClearScreen
	;LEA	SCREEN2,A1
	;BSR.W	ClearScreen
	BSR	WaitBlitter
	;*--- start copper ---*
	LEA	BG1,A0
	MOVEQ	#bypl,D0
	LEA	COPPER\.BplPtrs,A1
	MOVEQ	#bpls-1,D1
	BSR.W	PokePtrs

	;LEA	BG1+h/2*bypl,A0
	;MOVEQ	#bypl,D0
	;LEA	COPPER\.BplPtrsWaits+2+4,A1
	;MOVEQ	#bpls-1,D1
	;BSR.W	PokePtrs

	IFNE	COP_Y_MIRROR
	; #### POPULATE COPPER WAITS ####
	MOVE.W	#he/2-1,D7		; HOM MANY LINES
	MOVE.B	#$AE,D6			; STARTING WAITPOS
	LEA	BG1+he/2*bypl,A0
	LEA	COPPER\.BplPtrsWaits,A1

	.loop:
	CMP.B	#$FF,D6
	BNE.S	.notFF
	MOVE.B	#$00,D6
	MOVE.L	#$FFDFFFFE,(A1)+		; allow VPOS>$ff
	.notFF:

	MOVE.L	#$0001FF00,(A1)
	MOVE.B	D6,(A1)			; WAIT LINE
	;MOVE.L	#$00E00000,(A1)		; ACTUAL REGISTERS
	MOVE.L	#$00E20000,4(A1)		; ACTUAL REGISTERS
	MOVE.W	A0,6(A1)			; ONLY LOW WORD

	LEA	8(A1),A1			; NEXT GROUP
	LEA	((bypl*-1),A0),A0		; PREVIOUS LINE
	ADD.B	#1,D6			; INC. WAITLINE
	DBRA	D7,.loop
	; #### POPULATE COPPER WAITS ####
	ENDC

	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC
	MOVE.L	KICKSTART_ADDR,A3
	LEA	X_TEXTURE_MIRROR,A4		; FILLS A PLANE
	BSR.W	__FILL_MIRROR_TEXTURE	; WITH DITHERING
	LEA	X_TEXTURE_MIRROR,A3		; FILLS A PLANE
	LEA	X_TEXTURE_MIRROR,A4		; FILLS A PLANE
	BSR.W	__MIRROR_PLANE
	; #### CPU INTENSIVE TASKS BEFORE STARTING MUSIC

	; #### Point LOGO sprites
	LEA	COPPER\.SpritePointers,A1	; Puntatori in copperlist
	MOVE.L	#SPRT_K,D0		; indirizzo dello sprite in d0
	MOVE.L	#0,D0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#SPRT_O,D0		; indirizzo dello sprite in d0
	MOVE.L	#0,D0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#SPRT_N,D0		; indirizzo dello sprite in d0
	MOVE.L	#0,D0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#SPRT_Y,D0		; indirizzo dello sprite in d0
	MOVE.L	#0,D0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)

	ADDQ.W	#8,A1
	MOVE.L	#SPRT_E,D0		; indirizzo dello sprite in d0
	MOVE.L	#0,D0
	MOVE.W	D0,6(A1)
	SWAP	D0
	MOVE.W	D0,2(A1)
	; #### Point LOGO sprites
	MOVE.L	#COPPER,COP1LC
;********************  main loop  ********************
MainLoop:
	move.w	#$12c,d0		; No buffering, so wait until raster
	bsr.w	WaitRaster	; is below the Display Window.
	;*--- swap buffers ---*
	;movem.l	DrawBuffer(PC),a2-a3
	;exg	a2,a3
	;movem.l	a2-a3,DrawBuffer	;draw into a2, show a3
	;;*--- show one... ---*
	;move.l	a3,a0
	;move.l	#bypl*h,d0
	;lea	COPPER\.BplPtrs+2,a1
	;moveq	#bpls-1,d1
	;bsr.w	PokePtrs
	;;*--- ...draw into the other(a2) ---*
	;move.l	a2,a1
	;;bsr	ClearScreen

	;BSR.W	__SET_PT_VISUALS
	;MOVE.L	KONEYBG,DrawBuffer

	; do stuff here :)
	SONG_BLOCKS_EVENTS:
	;* FOR TIMED EVENTS ON BLOCK ****
	MOVE.W	#0,D5
	LEA	TIMELINE,A3
	;MULU.W	#4,D5		; CALCULATES OFFSET FROM SONGPOSITION
	LSL.W	#2,D5		; CALCULATES OFFSET (OPTIMIZED)
	MOVE.L	(A3,D5),A4	; THANKS HEDGEHOG!!
	JSR	(A4)		; EXECUTE SUBROUTINE BLOCK#

	;*--- main loop end ---*
	;MOVE.W	#$0002,$DFF180	; show rastertime left down to $12c
	ENDING_CODE:
	BTST	#6,$BFE001
	BNE.S	.DontShowRasterTime

	;MOVE.B	#1,SHIFT_INCR
	MOVE.B	SCROLL_DIR_Y,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_Y
	MOVE.B	SCROLL_DIR_X,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_X
	MOVE.B	#1,IS_FRAME_EVEN
	;MOVE.W	Y_EASYING_INDX,D5
	;MOVE.W	X_EASYING_INDX,D6
	;ADD.W	D5,D6
	;MOVE.W	D5,X_EASYING_INDX
	;MOVE.W	D6,Y_EASYING_INDX
	BSR.W	__X_LFO_EASYING
	.DontShowRasterTime:
	BTST	#2,$DFF016	; POTINP - RMB pressed?
	BNE.W	MainLoop		; then loop
	;*--- exit ---*
	;;    ---  Call P61_End  ---
	;MOVEM.L D0-A6,-(SP)
	;JSR P61_End
	;MOVEM.L (SP)+,D0-A6
	RTS

;********** Demo Routines **********
PokePtrs:				; Generic, poke ptrs into copper list
	.bypll:	
	move.l	a0,d2
	swap	d2
	move.w	d2,2(a1)		;high word of address
	move.w	a0,6(a1)		;low word of address
	addq.w	#8,a1		;skip two copper instructions
	add.l	d0,a0		;next ptr
	dbf	d1,.bypll
	rts

ClearScreen:			; a1=screen destination address to clear
	bsr	WaitBlitter
	clr.w	$66(a6)		; destination modulo
	move.l	#$01000000,$40(a6)	; set operation type in BLTCON0/1
	move.l	a1,$54(a6)	; destination address
	move.l	#blitsize*bpls,$58(a6)	;blitter operation size
	rts

VBint:				; Blank template VERTB interrupt
	movem.l	d0/a6,-(sp)	; Save used registers
	lea	$dff000,a6
	btst	#5,$1f(a6)	; check if it's our vertb int.
	beq.s	.notvb
	;*--- do stuff here ---*
	moveq	#$20,d0		; poll irq bit
	move.w	d0,$9c(a6)
	move.w	d0,$9c(a6)
	.notvb:	
	movem.l	(sp)+,d0/a6	; restore
	rte

__CREATESCROLLSPACE:
	MOVEM.L	D0-A6,-(SP)	; SAVE TO STACK
	MOVEQ	#bpls-1,D1	; UGUALI PER TUTTI I BITPLANE
	MOVE.L	#%00000000111111110000000000000000,D2	
	MOVE.L	KONEYBG,A4
	.OUTERLOOP:
	MOVEQ	#0,D6		; RESET D6
	MOVE.W	#bypl*hband-1,D6
	ADD.W	#bypl*(hblit),A4	; POSITIONING
	.INNERLOOP:
	MOVE.B	D2,(A4)+	
	DBRA	D6,.INNERLOOP
	ROR.L	#8,D2		; LAST BITPLANE FILLED
	DBRA	D1,.OUTERLOOP
	MOVEM.L	(SP)+,D0-A6	; FETCH FROM STACK
	RTS

__POPULATETXTBUFFER:
	MOVEM.L	D0-A6,-(SP)	; SAVE TO STACK
	MOVE.W	FRAMESINDEX,D7
	CMP.W	#4,D7
	BNE.W	.SKIP
	MOVE.L	BGPLANE3,A4
	LEA	FONT,A5
	LEA	TEXT,A6
	ADD.W	#bypl*(hblit),A4	; POSITIONING
	ADD.W	TEXTINDEX,A6
	CMP.L	#_TEXT-1,A6	; Siamo arrivati all'ultima word della TAB?
	BNE.S	.PROCEED
	MOVE.W	#0,TEXTINDEX	; Riparti a puntare dalla prima word
	LEA	TEXT,A6		; FIX FOR GLITCH (I KNOW IT'S FUN... :)
	.PROCEED:
	MOVE.B	(A6),D2		; Prossimo carattere in d2
	SUB.B	#$20,D2		; TOGLI 32 AL VALORE ASCII DEL CARATTERE, IN
	MULU.W	#8,D2		; MOLTIPLICA PER 8 IL NUMERO PRECEDENTE,
	ADD.W	D2,A5
	MOVEQ	#0,D6		; RESET D6
	MOVE.B	#8-1,D6
	.LOOP:
	ADD.W	#bypl-2,A4		; POSITIONING
	MOVE.B	(A5)+,(A4)+
	MOVE.B	#%00000000,(A4)+	; WRAPS MORE NICELY?
	DBRA	D6,.LOOP
	ADD.W	#bypl*2-2,A4	; POSITIONING
	MOVE.B	#%00000000,(A4)	; WRAPS MORE NICELY?
	.SKIP:
	SUB.W	#1,D7
	CMP.W	#0,D7
	BEQ.W	.RESET
	MOVE.W	D7,FRAMESINDEX
	MOVEM.L	(SP)+,D0-A6	; FETCH FROM STACK
	RTS
	.RESET:
	ADD.W	#1,TEXTINDEX
	MOVE.W	#4,D7
	MOVE.W	D7,FRAMESINDEX	; OTTIMIZZABILE
	MOVEM.L	(SP)+,D0-A6	; FETCH FROM STACK
	RTS

__SHIFTTEXT:
	MOVEM.L	D0-A6,-(SP)	; SAVE TO STACK
	BTST.B	#6,DMACONR	; for compatibility
	bsr	WaitBlitter

	MOVE.L	BGPLANE3,A4
	ADD.W	#bypl*he-2,A4	; POSITIONING
	MOVE.W	#$FFFF,BLTAFWM	; BLTAFWM lo spiegheremo dopo
	MOVE.W	#$FFFF,BLTALWM	; BLTALWM lo spiegheremo dopo
	MOVE.W	#%0010100111110000,BLTCON0	; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#0,BLTAMOD	; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#0,BLTDMOD	; BLTDMOD 40-4=36 il rettangolo

	MOVE.L	A4,BLTAPTH	; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH

	MOVE.W	#(hband-1)*64+wi/16,BLTSIZE	; BLTSIZE (via al blitter !)

	MOVEM.L	(SP)+,D0-A6	; FETCH FROM STACK
	RTS

__FILL_MIRROR_TEXTURE:
	MOVE.L	$DFF006,D4
	SWAP	D4
	MOVE.W	#he*4-1,D4	; QUANTE LINEE
	.outerloop:		; NUOVA RIGA
	MOVE.W	#(bypl/8)-1,D6	; RESET D6
	.innerloop:		; LOOP KE CICLA LA BITMAP

	BTST.B	#0,(A3)		; IF LINE EMPTY
	BNE.S	.skip
	LEA	10(A3),A3		; OPTIMIZED
	SWAP	D4
	MOVE.B	$DFF007,D4
	ROR.W	#6,D4
	move.b	$BFD800,d3
	NOT.W	D4
	AND.B	-80(A4),D4
	SWAP	D4
	.skip:

	MOVE.L	(A3)+,D5
	EOR.B	D4,D5
	ROL.W	D6,D5
	EOR.L	D4,D5
	ROR.W	D6,D5
	MOVE.L	D5,(A4)+
	DBRA	D6,.innerloop
	LEA	20(A4),A4
	DBRA	D4,.outerloop

	RTS

__MIRROR_PLANE:
	MOVE.L	A4,A5
	ADD.L	#bypl,A5
	MOVE.W	#(he*4)-1,D4	; QUANTE LINEE
	.outerloop:		; NUOVA RIGA
	MOVE.W	#(bypl/2)-1,D6
	.innerloop:
	MOVE.B	(A3)+,D5

	MOVE.B	D5,D0
	REPT 8
	ROXR.B	#1,D0		; FLIP BITS
	ROXL.B	#1,D2		; FLIP BITS
	ENDR
	MOVE.B	D2,-(A5)		; BOTTOM RIGHT
	DBRA	D6,.innerloop
	ADD.L	#(bypl/2),A3
	ADD.L	#(bypl/2)*3,A5
	DBRA	D4,.outerloop
	RTS

__TOGGLE_SHIFT_SIZE:
	MOVE.B	SHIFT_INCR,D3
	MOVE.L	#0,D2
	MOVE.B	SCROLL_SHIFT,D2
	AND.B	#7,D2
	TST.B	D2
	BNE.S	.skip
	NEG.B	D3
	MOVE.B	D3,SHIFT_INCR
	.skip:
	ADD.B	D3,SCROLL_SHIFT
	RTS

__BLIT_GLITCH_DATA:
	MOVE.W	#%0000100111110000,D1
	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4
	ADD.L	#bypl*(he/2-30),A4		; CENTER!
	bsr	WaitBlitter
	MOVE.W	BLIT_X_MASK,BLTAFWM		; BLTAFWM lo spiegheremo dopo
	MOVE.W	BLIT_Y_MASK,BLTALWM		; BLTALWM lo spiegheremo dopo
	MOVE.W	D1,BLTCON0		; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000100111110000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#0,BLTAMOD		; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#0,BLTDMOD		; BLTDMOD 40-4=36 il rettangolo

	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH
	MOVE.W	#32*64+(wi)/16,BLTSIZE	; BLTSIZE (via al blitter !)
	MOVE.B	(A3),SCROLL_SHIFT
	; ## MAIN BLIT ####
	ADD.L	#bypl,GLITCHDATA
	RTS

__BLIT_GLITCH_TILE:
	;MOVE.W	#%00001111111001010,D1	; for texture?
	MOVE.L	GLITCHDATA,A3

	; ## MAIN BLIT ####
	.waitData:
	;ADD.L	#bypl*2,A3		; GO TO NEXT
	LEA	20(A3),A3			; OPTIMIZED
	TST.L	(A3)			; IF LINE EMPTY
	BEQ.S	.waitData			
	.dataOk:
	CMP.L	#_X_TEXTURE_MIRROR,A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	ADD.L	#bypl*(he/2-58)+(bypl/2-4),A4	; CENTER!
	MOVE.L	A3,GLITCHDATA		; REMEMBER POSITION
	BSR	WaitBlitter
	MOVE.W	#%00001111111001010,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	MOVE.W	#bypl-(64/16*2),BLTBMOD	; BLTAMOD
	MOVE.W	#0,BLTAMOD		; BLTBMOD =0 for texture
	MOVE.W	#bypl-(64/16*2),BLTCMOD	; BLTCMOD
	MOVE.W	#bypl-(64/16*2),BLTDMOD	; BLTDMOD 40-4=36
	MOVE.L	#PATTERN,BLTAPTH		; TEXTURE
	MOVE.L	A3,BLTBPTH		; BLTAPT
	MOVE.L	A4,BLTCPTH
	MOVE.L	A4,BLTDPTH
	MOVE.W	#64*64+64/16,BLTSIZE	; BLTSIZE
	MOVE.B	(A3),SCROLL_SHIFT
	; ## MAIN BLIT ####
	RTS

__BLIT_GLITCH_BAND:
	MOVE.L	GLITCHDATA,A3
	CMP.L	#_X_TEXTURE_MIRROR-bypl*16,A3	; LAST WORD OF DATA?
	BLS.S	.notEnd
	MOVE.L	GLITCHRESET,A3		; RELOAD
	.notEnd:

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0	; BLTCON0
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	BLIT_SIZE,BLTSIZE		; BLTSIZE
	LEA	40(A3),A3			; OPTIMIZED
	MOVE.L	A3,GLITCHDATA		; REMEMBER POSITION
	; ## MAIN BLIT ####
	RTS

__SCROLL_BG_X:
	MOVEM.L	D0-A6,-(SP)		; SAVE TO STACK
	BTST.B	#6,DMACONR		; for compatibility

	MOVE.B	SCROLL_DIR_X,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_X

	MOVE.W	#%0000100111110000,D1

	CMP.B	#1,D5
	BEQ.B	.mainBlit
	ADD.L	#bypl*hblit,SCROLL_PLANE
	ADD.L	#bypl*hblit,SCROLL_SRC
	; ## FOR LEFT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	ADD.L	#bypl-2,A4			; POSITION FOR DESC
	MOVE.L	A4,BLTDPTH
	MOVE.W	#$FFFF,BLTAFWM		; BLTAFWM lo spiegheremo dopo
	MOVE.W	#$FFFF,BLTALWM		; BLTALWM lo spiegheremo dopo
	MOVE.W	D1,BLTCON0		; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bypl-2,BLTAMOD		; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#bypl-2,BLTDMOD		; BLTDMOD 40-4=36 il rettangolo

	MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE (via al blitter !)
	; ## FOR LEFT ####

	; ## MAIN BLIT ####
	.mainBlit:
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4
	ROL.W	#4,D1
	MOVE.B	SCROLL_SHIFT,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	BLIT_X_MASK,BLTAFWM		; BLTAFWM lo spiegheremo dopo
	MOVE.W	BLIT_X_MASK,BLTALWM		; BLTALWM lo spiegheremo dopo
	MOVE.W	D1,BLTCON0		; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#0,BLTAMOD		; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#0,BLTDMOD		; BLTDMOD 40-4=36 il rettangolo

	CMP.B	#1,D5
	BEQ.B	.goBlitter		; FOR LEFT
	ADD.L	#bypl*hblit-2,A3
	ADD.L	#bypl*hblit-2,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH
	MOVE.W	#(hblit<<6)+%00010101,BLTSIZE	; BLTSIZE (via al blitter !)
	; ## MAIN BLIT ####

	CMP.B	#1,D5
	BNE.B	.skip
	
	; ## FOR RIGHT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVEQ	#bypl-2,D0
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH
	ADD.L	D0,A4
	MOVE.L	A4,BLTBPTH
	MOVE.W	#%0000110111100100,BLTCON0	; d = ac+b!c = abc+a!bc+ab!c+!ab!c = %11100100 = $e4
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.B	SCROLL_SHIFT,D1
	MOVE.W	#$FFFF,D2
	LSR.W	D1,D2

	MOVE.W	D2,BLTCDAT
	MOVE.W	D0,BLTAMOD
	MOVE.W	D0,BLTBMOD
	MOVE.W	D0,BLTDMOD

	MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE (via al blitter !)
	.skip:
	; ## FOR RIGHT ####

	ADD.B	#1,SCROLL_SHIFT

	MOVEM.L	(SP)+,D0-A6		; FETCH FROM STACK
	RTS

__SCROLL_BG_Y:
	MOVEM.L	D0-A6,-(SP)		; SAVE TO STACK
	BTST.B	#6,DMACONR		; for compatibility

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	MOVE.L	#0,D1
	MOVE.B	SCROLL_SHIFT,D1
	;SUB.B	#2,D1
	MULU.W	#bypl,D1

	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4
	MOVE.B	SCROLL_DIR_Y,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_Y
	TST.B	D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	ADD.L	D1,A4			; POSITION Y
	ADD.L	#bypl*(he-1)-2,A3
	ADD.L	#bypl*(he-1)-2,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	;SUB.B	#bypl,D1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	BLIT_Y_MASK,BLTAFWM		; BLTAFWM
	MOVE.W	BLIT_Y_MASK,BLTALWM		; BLTALWM
	MOVE.W	#bypl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bypl-wblit,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(he-3)*64+(wi/2)/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####

	ADD.B	#1,SCROLL_SHIFT

	MOVEM.L	(SP)+,D0-A6		; FETCH FROM STACK
	RTS

__SCROLL2_BG_Y:
	MOVEM.L	D0-A6,-(SP)		; SAVE TO STACK
	BTST.B	#6,DMACONR		; for compatibility

	bsr	WaitBlitter
	MOVE.W	#%0000100111110000,BLTCON0

	MOVE.L	#0,D1
	MOVE.B	SCROLL_SHIFT,D1
	;SUB.B	#2,D1
	MULU.W	#bypl,D1

	; ## MAIN BLIT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4
	MOVE.B	SCROLL_DIR_Y,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_Y
	TST.B	D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	ADD.L	D1,A4			; POSITION Y
	ADD.L	#bypl*hblit-2,A3
	ADD.L	#bypl*hblit-2,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	;SUB.B	#bypl,D1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.W	BLIT_Y_MASK,BLTAFWM		; BLTAFWM
	MOVE.W	BLIT_Y_MASK,BLTALWM		; BLTALWM
	MOVE.W	#0,BLTAMOD		; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#0,BLTDMOD		; BLTDMOD 40-4=36 il rettangolo

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#hblit*64+wi/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####

	ADD.B	#1,SCROLL_SHIFT

	MOVEM.L	(SP)+,D0-A6		; FETCH FROM STACK
	RTS

__SCROLL2_BG_X:
	MOVEM.L	D0-A6,-(SP)		; SAVE TO STACK
	BTST.B	#6,DMACONR		; for compatibility

	MOVE.B	SCROLL_DIR_X,D5
	NEG.B	D5
	MOVE.B	D5,SCROLL_DIR_X

	MOVE.W	#%0000100111110000,D1

	ADD.L	#(wi/2/16*2),SCROLL_PLANE
	ADD.L	#(wi/2/16*2),SCROLL_SRC

	CMP.B	#1,D5
	BEQ.B	.mainBlit
	; ## FOR LEFT ####
	SUB.L	#(wi/2/16*2),SCROLL_PLANE	; THIS IS...
	SUB.L	#(wi/2/16*2),SCROLL_SRC	; ...UGLY...
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	ADD.L	#bypl-2,A4			; POSITION FOR DESC
	MOVE.L	A4,BLTDPTH
	MOVE.W	#$FFFF,BLTAFWM		; BLTAFWM lo spiegheremo dopo
	MOVE.W	#$FFFF,BLTALWM		; BLTALWM lo spiegheremo dopo
	MOVE.W	D1,BLTCON0		; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bypl-2,BLTAMOD		; BLTAMOD =0 perche` il rettangolo
	MOVE.W	#bypl-2,BLTDMOD		; BLTDMOD 40-4=36 il rettangolo

	MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE (via al blitter !)
	; ## FOR LEFT ####

	; ## MAIN BLIT ####
	.mainBlit:
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4
	ROL.W	#4,D1
	MOVE.B	SCROLL_SHIFT,D1
	ROR.W	#4,D1
	bsr	WaitBlitter
	MOVE.W	BLIT_X_MASK,BLTAFWM		; BLTAFWM lo spiegheremo dopo
	MOVE.W	BLIT_X_MASK,BLTALWM		; BLTALWM lo spiegheremo dopo
	MOVE.W	D1,BLTCON0		; BLTCON0 (usa A+D); con shift di un pixel
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.W	#bypl-wblit,BLTAMOD		; BLTAMOD
	MOVE.W	#bypl-wblit,BLTDMOD		; BLTDMOD

	CMP.B	#1,D5
	BEQ.B	.goBlitter		; FOR LEFT
	ADD.L	#bypl*he-wblit-4,A3
	ADD.L	#bypl*he-wblit-4,A4
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 BIT 12 DESC MODE

	.goBlitter:
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH
	MOVE.W	#hblit*64+(wi/2)/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####

	CMP.B	#1,D5
	BNE.B	.skip
	
	; ## FOR RIGHT ####
	MOVE.L	SCROLL_SRC,A3
	MOVE.L	SCROLL_PLANE,A4		; PATCH FIRST WORD COLUMN
	bsr	WaitBlitter
	MOVEQ	#bypl-2,D0
	MOVE.L	A3,BLTAPTH		; BLTAPT  (fisso alla figura sorgente)
	MOVE.L	A4,BLTDPTH
	ADD.L	D0,A4
	MOVE.L	A4,BLTBPTH
	MOVE.W	#%0000110111100100,BLTCON0	; d = ac+b!c = abc+a!bc+ab!c+!ab!c = %11100100 = $e4
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1 BIT 12 DESC MODE
	MOVE.B	SCROLL_SHIFT,D1
	MOVE.W	#$FFFF,D2
	LSR.W	D1,D2

	MOVE.W	D2,BLTCDAT
	MOVE.W	D0,BLTAMOD
	MOVE.W	D0,BLTBMOD
	MOVE.W	D0,BLTDMOD

	MOVE.W	#(hblit<<6)+%000001,BLTSIZE	; BLTSIZE (via al blitter !)
	.skip:
	; ## FOR RIGHT ####

	ADD.B	#1,SCROLL_SHIFT

	MOVEM.L	(SP)+,D0-A6		; FETCH FROM STACK
	RTS

__SCROLL_X_1_4:
	MOVE.W	#%1001111100000000,D1
	MOVE.W	#bypl*he/2-(bypl/2)-1,D6	; OPTIMIZE
	MOVE.L	#((bypl/2)<<16)+bypl/2,D7
	MOVE.W	#0,D2
	MOVE.B	X_1_4_SHIFT+1,D4		; FIX FOR -1 VALUES
	MOVE.B	X_1_4_DIR,D5
	CMP.B	#1,D5
	BEQ.B	.notDesc
	; ## MAIN BLIT ####
	BSET.L	#$1,D2			; BLTCON1 BIT 12 DESC MODE
	ADD.W	D6,A3
	ADD.W	D6,A4
	;LEA	40(A4),A4
	;LEA	40(A3),A3
	.notDesc:

	MOVE.B	D4,D1
	ROR.W	#4,D1
	bsr	WaitBlitter

	MOVE.W	D1,BLTCON0		; BLTCON0
	MOVE.W	D2,BLTCON1
	MOVE.L	D7,BLTAMOD		; BLTAMOD
	MOVE.L	A3,BLTAPTH		; BLTAPT
	MOVE.L	A4,BLTDPTH
	MOVE.W	#(he/2)*64+(wi/2/16),BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__SCROLL_Y_HALF:
	MOVEQ	#0,D1
	MOVE.W	Y_HALF_SHIFT,D1

	MULU.W	#bypl,D1
	;LEA	BPL_PRECALC,A0
	;ADD.W	D1,D1
	;MOVE.W	(A0,D1.W),D1

	; ## MAIN BLIT ####

	MOVE.B	Y_HALF_DIR,D5
	NEG.B	D5
	MOVE.B	D5,Y_HALF_DIR

	BSR	WaitBlitter
	MOVE.W	#%000100111110000,BLTCON0
	CMP.B	#1,D5
	BEQ.S	.goUp
	MOVE.W	#%0000000000000010,BLTCON1	; BLTCON1 DESC MODE
	SUB.L	D1,A3			; POSITION Y
	MOVE.W	#bypl*(he/2)-1,D6
	ADD.W	D6,A3
	ADD.W	D6,A4
	BRA.S	.goBlit
	.goUp:
	MOVE.W	#%0000000000000000,BLTCON1	; BLTCON1
	ADD.L	D1,A3			; POSITION Y
	.goBlit:

	MOVE.L	#$FFFFFFFF,BLTAFWM		; THEY'LL NEVER
	MOVE.W	BLIT_A_MOD,BLTAMOD		; BLTAMOD
	MOVE.W	BLIT_D_MOD,BLTDMOD		; BLTDMOD

	MOVE.L	A3,BLTAPTH		; BLTAPT SRC
	MOVE.L	A4,BLTDPTH		; DESC
	MOVE.W	#(he/2)*64+wi/16,BLTSIZE	; BLTSIZE
	; ## MAIN BLIT ####
	RTS

__Y_LFO_EASYING:
	MOVE.W	Y_EASYING_INDX,D0
	LEA	Y_EASYING_TBL,A0
	MOVE.W	(A0,D0.W),D1
	LSR.W	#1,D1
	ADD.W	#2,D1
	MOVE.W	D1,Y_EASYING
	ADDQ.B	#2,D0
	AND.W	#$7E,D0
	MOVE.W	D0,Y_EASYING_INDX
	TST.W	D0
	BEQ.S	__X_LFO_EASYING
	RTS

__X_LFO_EASYING:
	MOVE.W	X_EASYING_INDX,D0
	LEA	X_EASYING_TBL,A0
	MOVE.W	(A0,D0.W),D1
	ADD.W	#2,D1
	LSR.W	#1,D1
	MOVE.W	D1,X_EASYING
	ADDQ.B	#2,D0
	AND.W	#$7E,D0
	MOVE.W	D0,X_EASYING_INDX
	RTS

__BLOCK_0:
	MOVE.L	BGPLANE0,A4
	BSR.W	__BLIT_GLITCH_TILE

	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_PLANE

	TST.B	IS_FRAME_EVEN
	BNE.S	.notEven
	MOVE.B	#1,IS_FRAME_EVEN

	MOVE.B	SCROLL_SHIFT,D1
	AND.B	#$3,D1
	MOVE.B	D1,SCROLL_SHIFT

	BSR.W	__SCROLL2_BG_Y
	BSR.W	__SCROLL2_BG_Y		; SHIFT !!
	BSR.W	__SCROLL_BG_X		; SHIFT !!
	BSR.W	__SCROLL_BG_X

	BRA.S	.notOdd
	.notEven:
	MOVE.B	#0,IS_FRAME_EVEN

	;BSR.W	__SCROLL2_BG_X		; SHIFT !!
	
	MOVE.B	SCROLL_SHIFT,D1
	AND.B	#$2,D1
	MOVE.B	D1,SCROLL_SHIFT
	
	BSR.W	__SCROLL2_BG_Y
	BSR.W	__SCROLL2_BG_Y		; SHIFT !!
	;BSR.W	__SCROLL2_BG_X	

	;MOVE.L	GLITCHDATA,SCROLL_SRC
	;MOVE.L	BGPLANE0,SCROLL_PLANE
	;BSR.W	__BLIT_GLITCH_DATA

	.notOdd:

	RTS

__BLOCK_00:
	;MOVE.L	BGPLANE0,A4
	;BSR.W	__BLIT_GLITCH_TILE

	MOVE.W	X_EASYING,X_1_4_SHIFT
	MOVE.W	Y_EASYING,Y_HALF_SHIFT

	;## DRAW GLITCH ##
	MOVE.W	#16*64+wi/16,BLIT_SIZE
	MOVE.L	#0,BLIT_A_MOD
	;MOVE.W	#0,BLIT_D_MOD

	MOVE.B	#-1,Y_HALF_DIR
	MOVE.L	BGPLANE0,A3
	MOVE.L	A3,A4
	BSR.W	__SCROLL_Y_HALF

	MOVE.L	BGPLANE0,A4
	ADD.L	#bypl*((he/2)-14),A4
	BSR.W	__BLIT_GLITCH_BAND

	MOVE.L	BGPLANE0,A3
	MOVE.L	A3,A4
	MOVE.B	#-1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	MOVE.L	BGPLANE0,A3
	LEA	20(A3),A3
	MOVE.L	A3,A4
	MOVE.B	#1,X_1_4_DIR
	BSR.W	__SCROLL_X_1_4

	BSR.W	__Y_LFO_EASYING
	BSR.W	__X_LFO_EASYING
	RTS

__BLOCK_F:
	; 0: EMPTY_BEGIN
	;MOVE.L	#0,V_SHIFT_FACT
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	;MOVE.B	#0,SCROLL_DIR_X
	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	SUB.B	#1,SCROLL_SHIFT

	;MOVE.B	#0,SCROLL_DIR_X
	MOVE.L	BGPLANE2,SCROLL_SRC
	MOVE.L	BGPLANE2,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	;MOVE.B	#1,SCROLL_DIR_X
	MOVE.L	BGPLANE3,SCROLL_SRC
	MOVE.L	BGPLANE3,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_X,D5
	NOT.B	D5
	MOVE.B	D5,SCROLL_DIR_X

	MOVE.B	SCROLL_INDEX,D5
	ADD.B	#5,D5
	AND.B	#31,D5
	MOVE.B	D5,SCROLL_INDEX
	TST.B	D5
	;BNE.S	.skip
	;MOVE.B	#0,SCROLL_SHIFT
	;MOVE.B	SCROLL_DIR_X,D5
	;NOT.B	D5
	;MOVE.B	D5,SCROLL_DIR_X
	;ADD.B	#1,SCROLL_SHIFT
	;BRA.S	.skip2
	.skip:

	.skip2:

	ADD.L	#4,GLITCHDATA

	MOVE.L	V_SHIFT_FACT,D5
	;ADD.L	D5,BGPLANE3
	;ADD.L	D5,BGPLANE1
	NEG.L	D5
	;ADD.L	D5,BGPLANE2
	;ADD.L	D5,BGPLANE0

	MOVE.W	V_SCROLL_INDEX,D6
	ADD.W	#1,D6
	AND.W	#(hblit/2)-1,D6
	TST.W	D6
	BNE.S	.noReset
	MOVE.L	D5,V_SHIFT_FACT
	.noReset:
	MOVE.W	D6,V_SCROLL_INDEX
	;BSR.W	__POPULATETXTBUFFER
	;BSR.W	__SHIFTTEXT
	RTS

__BLOCK_1:
	; 0: EMPTY_BEGIN
	MOVE.L	BGPLANE0,SCROLL_SRC
	MOVE.L	BGPLANE0,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_X,D5
	;NOT.B	D5
	MOVE.B	D5,SCROLL_DIR_X

	MOVE.L	BGPLANE1,SCROLL_SRC
	MOVE.L	BGPLANE1,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	ADD.B	#3,SCROLL_SHIFT

	MOVE.B	SCROLL_INDEX,D5
	ADD.B	#5,D5
	AND.B	#31,D5
	MOVE.B	D5,SCROLL_INDEX
	TST.B	D5
	;BNE.S	.skip
	;MOVE.B	#0,SCROLL_SHIFT
	;MOVE.B	SCROLL_DIR_X,D5
	;NOT.B	D5
	;MOVE.B	D5,SCROLL_DIR_X
	;ADD.B	#1,SCROLL_SHIFT
	;BRA.S	.skip2
	.skip:

	MOVE.L	BGPLANE2,SCROLL_SRC
	MOVE.L	BGPLANE2,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	ADD.L	#4,GLITCHDATA

	.skip2:

	MOVE.L	BGPLANE3,SCROLL_SRC
	MOVE.L	BGPLANE3,SCROLL_PLANE
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	;MOVE.B	#1,SCROLL_DIR_X

	MOVE.L	V_SHIFT_FACT,D5
	ADD.L	D5,BGPLANE1
	;ADD.L	D5,BGPLANE1
	NEG.L	D5
	ADD.L	D5,BGPLANE2
	;ADD.L	D5,BGPLANE2

	MOVE.W	V_SCROLL_INDEX,D6
	ADD.W	#1,D6
	AND.W	#(he/2)-1,D6
	TST.W	D6
	BNE.S	.noReset
	MOVE.L	D5,V_SHIFT_FACT
	.noReset:
	MOVE.W	D6,V_SCROLL_INDEX
	;BSR.W	__POPULATETXTBUFFER
	;BSR.W	__SHIFTTEXT
	RTS

__BLOCK_2:
	; 4: Robot + KassaImberlada Kambio
	; 2: Robot + Kassa (pausa)
	BSR.W	__POPULATETXTBUFFER
	BSR.W	__SHIFTTEXT

	MOVE.B	#1,SCROLL_DIR_X
	MOVE.L	BGPLANE0,SCROLL_PLANE
	MOVE.B	#3,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	; BASS DRIVING KICK DELAY
	;MOVE.B	#1,SCROLL_DIR_X
	;MOVE.L	BGPLANE0,SCROLL_PLANE
	;MOVE.B	AUDIOCHLEVEL2,SCROLL_SHIFT
	;BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_3,SCROLL_DIR_X
	MOVE.L	BGPLANE2,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL3,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!
	RTS

__BLOCK_3:
	; 5: Robot + Ritmo + KassaIPERImb
	BSR.W	__POPULATETXTBUFFER
	BSR.W	__SHIFTTEXT

	; BASS DRIVING KICK DELAY
	MOVE.B	#1,SCROLL_DIR_X
	MOVE.L	BGPLANE1,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL2,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_3,SCROLL_DIR_X
	MOVE.L	BGPLANE2,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL3,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_0,SCROLL_DIR_X
	MOVE.L	BGPLANE3,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL0NRM,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!
	RTS

__BLOCK_4:
	; 2: Robot + Kassa (pausa)
	BSR.W	__POPULATETXTBUFFER
	BSR.W	__SHIFTTEXT
	; BASS
	MOVE.B	#0,SCROLL_DIR_X
	MOVE.L	BGPLANE1,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL2,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_3,SCROLL_DIR_X
	MOVE.L	BGPLANE2,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL3,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!

	MOVE.B	SCROLL_DIR_0,SCROLL_DIR_X
	MOVE.L	BGPLANE3,SCROLL_PLANE
	MOVE.B	AUDIOCHLEVEL0NRM,SCROLL_SHIFT
	BSR.W	__SCROLL_BG_X		; SHIFT !!
	RTS

__BLOCK_5:
	RTS

__BLOCK_6:
	RTS

__BLOCK_7:
	RTS

__BLOCK_VOX:
	RTS

__BLOCK_8:
	RTS

__BLOCK_9:
	RTS

__BLOCK_A:
	RTS

__BLOCK_B:
	RTS

__BLOCK_C:
	RTS

__BLOCK_D:
	RTS

__BLOCK_E:
	RTS

__BLOCK_END:
	RTS

;********** Fastmem Data **********
TIMELINE:		DC.L __BLOCK_00
		DC.L __BLOCK_1,__BLOCK_1		; 1 1: Solo Robot
		DC.L __BLOCK_2,__BLOCK_2		; 3 3: Robot + KassaImberlada
		DC.L __BLOCK_2,__BLOCK_3		; 5 2: Robot + Kassa (pausa)
		DC.L __BLOCK_3,__BLOCK_3		; 7 5: Robot + Ritmo + KassaIPERImb
		DC.L __BLOCK_4,__BLOCK_4		; 9 6: KASSA dritta + h?
		DC.L __BLOCK_5,__BLOCK_5		; 11 7: KASSA dritta gif2
		DC.L __BLOCK_5,__BLOCK_4		; 13 7: KASSA dritta gif2
		DC.L __BLOCK_6,__BLOCK_6		; 15 8: KAssa pause
		DC.L __BLOCK_7,__BLOCK_7		; 17 9: KAssa dritta
		DC.L __BLOCK_6,__BLOCK_7		; 19 8: KAssa pause
		DC.L __BLOCK_8,__BLOCK_8		; 21 7: KASSA dritta gif2
		DC.L __BLOCK_8,__BLOCK_8		; 24 7: KASSA dritta gif2
		DC.L __BLOCK_VOX			; 25 10: ARGH!
		DC.L __BLOCK_9,__BLOCK_9,__BLOCK_9	; 26 11: Argh+ PArte di kick
		DC.L __BLOCK_A,__BLOCK_A,__BLOCK_A	; 31 12: ARGH + kick
		DC.L __BLOCK_VOX			; 32 10: ARGH!
		DC.L __BLOCK_5,__BLOCK_5		; 33 13: Argh +kick +GIF2
		DC.L __BLOCK_B,__BLOCK_B		; 36 14: Argh +rull +gif2
		DC.L __BLOCK_5,__BLOCK_8		; 37 15: Argh + Casino
		DC.L __BLOCK_D,__BLOCK_D		; 39 16: KASSADRITTA!
		DC.L __BLOCK_D			; 41 13: Argh +kick +GIF2
		DC.L __BLOCK_8,__BLOCK_8,__BLOCK_8	; 42 17: KASSADRITTA2!
		DC.L __BLOCK_5,__BLOCK_5		; 45 12: ARGH + kick
		DC.L __BLOCK_6,__BLOCK_6		; 47 12: ARGH + kick
		DC.L __BLOCK_7,__BLOCK_7		; 50 11: Argh+ PArte di kick
		DC.L __BLOCK_C,__BLOCK_C		; 52 17: KASSADRITTA2!
		DC.L __BLOCK_D,__BLOCK_D		; 54 7: KASSA dritta gif2
		DC.L __BLOCK_B,__BLOCK_B		; 56 5: Robot + Ritmo + KassaIPERImb
		DC.L __BLOCK_E,__BLOCK_E		; 58 4: Robot + KassaImberlada Kambio
		DC.L __BLOCK_E,__BLOCK_E		; 60 1: Solo Robot
		DC.L __BLOCK_VOX			; 61 18: FINE!
		DC.L __BLOCK_END

AUDIOCHLEVEL0NRM:	DC.W 0
AUDIOCHLEVEL0:	DC.W 0
AUDIOCHLEVEL1:	DC.W 0
AUDIOCHLEVEL2:	DC.W 0
AUDIOCHLEVEL3:	DC.W 0
P61_LAST_POS:	DC.W MODSTART_POS
P61_DUMMY_POS:	DC.W 0
P61_FRAMECOUNT:	DC.W 0
KONEYBG:		DC.L BG1		; INIT BG
BGPLANE0:		DC.L BG1
BGPLANE1:		DC.L BG1+bypl*he
BGPLANE2:		DC.L BG1+bypl*he*2
BGPLANE3:		DC.L BG1+bypl*he*3
SCROLL_INDEX:	DC.W 0
SCROLL_PLANE:	DC.L 0
SCROLL_SRC:	DC.L 0
SPR_0_POS:	DC.B $7C		; K
SPR_1_POS:	DC.B $84		; O
SPR_2_POS:	DC.B $8C		; N
SPR_3_POS:	DC.B $94		; E
SPR_4_POS:	DC.B $9C		; Y
SCROLL_SHIFT:	DC.B 0
SHIFT_INCR:	DC.B -1
SCROLL_SHIFT_Y:	DC.B 2
SCROLL_DIR_X:	DC.B 1		; 0=LEFT 1=RIGHT
SCROLL_DIR_Y:	DC.B 0		; 0=LEFT 1=RIGHT
SCROLL_DIR_0:	DC.B 1
SCROLL_DIR_1:	DC.B 1
SCROLL_DIR_2:	DC.B 1
SCROLL_DIR_3:	DC.B 1
IS_FRAME_EVEN:	DC.B 1
		EVEN
TEXTINDEX:	DC.W 0
FRAMESINDEX:	DC.W 4
KICKSTART_ADDR:	DC.L $F80000
GLITCHRESET:	DC.L X_TEXTURE_MIRROR
GLITCHDATA:	DC.L X_TEXTURE_MIRROR
V_SHIFT_FACT:	DC.L (bypl*2)*-1
V_SCROLL_INDEX:	DC.W 0
BLIT_Y_MASK:	DC.W $FFFF
BLIT_X_MASK:	DC.W $FFFF
BLIT_A_MOD:	DC.W 0
BLIT_D_MOD:	DC.W 0
BLIT_SIZE:	DC.W 2*64+wi/2/16

X_1_4_DIR:	DC.B 1	; -1=LEFT 1=RIGHT
Y_1_4_DIR:	DC.B -1	; -1=LEFT 1=RIGHT
X_1_4_SHIFT:	DC.W 3
Y_1_4_SHIFT:	DC.W 10
X_HALF_DIR:	DC.B 0
Y_HALF_DIR:	DC.B 0
X_HALF_SHIFT:	DC.W 0
Y_HALF_SHIFT:	DC.W 2

Y_EASYING_INDX:	DC.W 82
Y_EASYING_TBL:	DC.W 1,1,1,1,2,1,2,2,3,3,2,3,4,4,4,4,4,5,5,6,6,6,6,6,7,7,8,7,8,8,9,9,10
		DC.W 9,10,11,9,8,7,7,6,6,6,5,5,5,4,4,4,4,3,3,3,2,3,3,2,2,2,2,2,1,1,1,1,0
Y_EASYING:	DC.W 1

X_EASYING_INDX:	DC.W 0
X_EASYING_TBL:	DC.W 0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,12,11,12,11,10,9,8,8,8,7,6,5,6
		DC.W 5,5,5,4,4,3,3,2,2,2,2,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,0
X_EASYING:	DC.W 1

COPCOL_REGISTER:	DC.L 0
COPCOL_VALUE:	DC.W 0
COPCOL_INDEX:	DC.W 0
COPCOL_ADDER:	DC.W $0100
JOYFIRE_STATUS:	DC.W 0
JOYDIR_STATUS:	DC.W 0

	;*******************************************************************************
	SECTION	ChipData,DATA_C	;declared data that must be in chipmem
	;*******************************************************************************

BG1:		DS.B he*bwid	; DEFINE AN EMPTY AREA FOR THE MARGIN WORD

BPLxMOD_INDEX:	DC.W 0
BPLxMOD_TABLE:	DC.W 1,3,4,1,12,5,4,7,1,4,3,1,0,2,6,10,7,3,2,1,5,4,1,8,7,6,5,1,8,0,1,8,0,3,1,7,17,4,30,3,6,1

SPRITES:		INCLUDE "sprite_KONEY.s"
PATTERN:		INCBIN "pattern_gear2.raw"
DITHER:		INCBIN "dithermirrorbg.raw"
MODULE:		INCBIN "CrippledCyborgV7.P61"	; code $1009307
_MED_MODULE:

FONT:		DC.L 0,0		; SPACE CHAR
		INCBIN "digital_font.raw",0
		EVEN

TEXT:	DC.B "!!WARNING!! - EPILEPSY DANGER AHEAD!!   SERIOUSLY... :)    "
	DC.B "WELCOME TO:   ### CRIPPLED CYBORG ###   KONEY'S SECOND AMIGA HARDCORE RELEASE!   "
	DC.B "AS PROMISED MORE GLITCHES AND BLITSTORTIONS ARE BEING DELIVERED TO YOUR AMIGA. "
	DC.B "IT SHOULDN'T BE NECESSARY TO REMIND THAT THIS PIECE OF CRAPPY CODE IS BEST VIEWED "
	DC.B "ON A REAL AMIGA WITH A TRUE CRT DISPLAY AND BIG LOUDSPEAKERZ!! NO EMULATION FUCKERS, "
	DC.B "AN EMULATOR IS LIKE AN INFLATABLE SEXDOLL: YOU CAN HAVE FUN WITH IT BUT YOU CAN'T "
	DC.B "SAY YOU HAVE A GIRLFRIEND! SO FIRE UP YOUR REAL AMIGA IF YOU HAVEN'T ALREADY!  "
	DC.B "IT'S NOW TIME FOR THE REAL SCROLLTEXT: I PUBLISHED THIS TRACK ON MY OWN LABEL BACK "
	DC.B "IN 2000 WITH CAT# KNY-04 'PEOPLEGRINDER' BUT ACCORDINGLY TO THE NOTE INSIDE .MED FILE "
	DC.B "IT WAS COMPOSED BACK IN 1997. ODDLY THIS IS NOT WHAT I REMEMBER BUT WE WRITE NOTES ON "
	DC.B "STUFF TO REMEMBER THINGS SO I ASSUME IT WAS REALLY 1997! TWENTY FUCKING THREE "
	DC.B "YEARS AGO! ALL MY AMIGA MUSIC WAS MADE WITH OCTAMED SOUNDSTUDIO SO TO PUT ANY SONG "
	DC.B "INTO ASSEMBLY CODE A CONVERSION TO .MOD IS REQUIRED. THIS IS USUALLY AN EASY TASK "
	DC.B "BUT BACK IN THE DAYS I THOUGHT IT WAS A GOOD IDEA TO LOAD ANY KIND OF FILE AS "
	DC.B "SAMPLES INTO OCTAMED... IT TURNED OUT THEY DON'T PLAY AS GOOD IN P61, SOME OF THEM MAKE "
	DC.B "GLITCHES... I KNOW IT'S FUNNY TO SAY, GIVEN THE VISUALS AND THE REST OF THE SOUNDZ, "
	DC.B "BUT I WANTED THE INTRO TO SOUND AS CLOSE AS POSSIBLE TO THE ORIGINAL "
	DC.B "RECORDING ON VINYL SO I HAD SOME OF THIS SAMPLES RE-SAMPLED FROM-TO-AMIGA "
	DC.B "(THANKS KCMA!). ABOUT LOADING RANDOM FILES AS SAMPLES... TO BE HONEST I STILL THINK IT WAS "
	DC.B "A GOOD IDEA!! THE SAME WAY THESE DAYS I THINK IT IS A GOOD IDEA TO FEED SEMI-RANDOM VALUES "
	DC.B "INTO BPLXMOD REGISTERS, JUST FOR SOME EXTRA GLITCH FUN! AND IT WORKS, GURULESSLY!!   "
	DC.B "SO THERE'S A LOT OF BLITTING ACTION HERE, IT TOOK ME A WHILE BUT I MANAGED TO DO WHAT I HAD IN "
	DC.B "MIND AND FOR THIS I MUST THANK ALL THE GUYS FROM EAB DISCUSSION: 'BLITTER SHIFT EATING 1PX AWAY' "
	DC.B "WHICH RAN FOR ALMOST ONE YEAR! THANKS FOR YOUR PATIENCE! ANYWAY MY IDEA WAS TO "
	DC.B "SCROLL 4 SEPARATE BITPLANES (ONE PER AUDIO CHANNEL) BUT IT TURNS OUT THAT BLITTING "
	DC.B "SO MUCH DATA IN A SINGLE FRAME REQUIRES NASTY BLITTER BIT SET BUT I LEARNT THE HARD "
	DC.B "WAY WHAT PHOTON/SCOOPEX ONCE SAID: 'THE BLITTER IS VERY NASTY INDEED. BUT PAULA IS NASTIER!'...   "
	DC.B "SO ONLY 3 BITPLANE SCROLLED AT A TIME, WELL ANYWAY THERE IS ENOUGH MESS ON SCREEN ALREADY I GUESS :)  "
	DC.B "I'LL POST THIS INTRO IN POUET.NET, IF YOU ARE ONE OF THE NICE GUYS WHO UPVOTED "
	DC.B "MY FIRST INTRO 'FATAL DEFRAG' I WANT YOU TO KNOW THAT I REALLY APPRECIATE YOUR SUPPORT! "
	DC.B "SPEAKING OF POUET.NET I'VE JUST NOTICED A GUY CALLED 'KIMI KANDLER' HAS ADDED 'FATAL DEFRAG' "
	DC.B "TO A LIST OF PRODUCTIONS PRESSED ON VINYL, NICE ONE! HERE YOU HAVE MORE FOR YOUR LIST! "
	DC.B "FOR THE FUTURE I AM ALREADY THINKING AT THE NEXT INTRO WHICH WILL FEATURE ONE OF MY MOST "
	DC.B "ARCHETYPAL TRACKS: 'KETAMUSKOLAR' RELEASED BACK IN 2002 ON SONIC POLLUTION #02.    "
	DC.B "ONE LAST WORD BEFORE ABANDONING THE SCREEN TO THE GLITCHES... I AM ABANDONING THE "
	DC.B "SCREEN TO THE GLITCHES :) - MAKE SURE TO VISIT WWW.KONEY.ORG FOR MORE INDUSTRIAL "
	DC.B "AMIGACORE!!            .EOF                                                              "
	EVEN
_TEXT:

COPPER:
	DC.W $1FC,0	; Slow fetch mode, remove if AGA demo.
	DC.W $8E,$2C81	; 238h display window top, left | DIWSTRT - 11.393
	DC.W $90,$2CC1	; and bottom, right.	| DIWSTOP - 11.457
	DC.W $92,$38	; Standard bitplane dma fetch start
	DC.W $94,$D0	; and stop for standard screen.
	DC.W $106,$0C00	; (AGA compat. if any Dual Playf. mode)
	DC.W $108,0	; BPL1MOD	 Bitplane modulo (odd planes)
	DC.W $10A,0	; BPL2MOD Bitplane modulo (even planes)
	DC.W $102,0	; SCROLL REGISTER (AND PLAYFIELD PRI)

	.Palette:
	DC.W $0180,$0013,$0182,$05AA,$0184,$0232,$0186,$0333
	DC.W $0188,$0667,$018A,$0333,$018C,$0667,$018E,$0777
	DC.W $0190,$0888,$0192,$0888,$0194,$0999,$0196,$0AAA
	DC.W $0198,$0BBB,$019A,$0CCC,$019C,$0DDD,$019E,$0FFF

	.BplPtrs:
	DC.W $E0,0
	DC.W $E2,0
	DC.W $E4,0
	DC.W $E6,0
	DC.W $E8,0
	DC.W $EA,0
	DC.W $EC,0
	DC.W $EE,0
	DC.W $F0,0
	DC.W $F2,0
	DC.W $F4,0
	DC.W $F6,0		;full 6 ptrs, in case you increase bpls
	DC.W $100,bpls*$1000+$200	;enable bitplanes

	.SpritePointers:
	DC.W $120,0,$122,0	; 0
	DC.W $124,0,$126,0	; 1
	DC.W $128,0,$12A,0	; 2
	DC.W $12C,0,$12E,0	; 3
	DC.W $130,0,$132,0	; 4
	DC.W $134,0,$136,0	; 5
	DC.W $138,0,$13A,0	; 6
	DC.W $13C,0,$13E,0	; 7

	DC.W $1A6
	.LOGOCOL1:
	DC.W $000		; COLOR0-1
	DC.W $1AE
	.LOGOCOL2:
	DC.W $000		; COLOR2-3
	DC.W $1B6
	.LOGOCOL3:
	DC.W $000		; COLOR4-5

	;DC.W $3801,$FF00
	;DC.W $0180,$0FFF
	;DC.W $3901,$FF00
	;DC.W $0180,$000F

	.COPPERWAITS:
	IFNE	COP_Y_MIRROR
	.BplPtrsWaits:
	DS.W 127*4+2	; 4 word * lines + 2 VPOS>$ff
	;DC.W 0,0		; allow VPOS>$ff
	ENDC

	;DC.W $002D,$FFFE
	;DC.W $F102,$A68E
	;DC.W $FE07,$FFFE
	;DC.W $F102,$1F83

	;DC.W $FE07,$FFFE
	;DC.W $0180,$0FFF
	;DC.W $FF07,$FFFE
	;DC.W $0180,$0011	; SCROLLAREA BG COLOR
	;DC.W $0182,$0AAA	; SCROLLING TEXT WHITE ON

	;DC.W $FFDF,$FFFE	; allow VPOS>$ff

	DC.W $FFFF,$FFFE	; magic value to end copperlist
_COPPER:

;*******************************************************************************
	SECTION ChipBuffers,BSS_C	;BSS doesn't count toward exe size
;*******************************************************************************

X_TEXTURE_MIRROR:	DS.B he*bypl*4	; mirrored texture
_X_TEXTURE_MIRROR:

END